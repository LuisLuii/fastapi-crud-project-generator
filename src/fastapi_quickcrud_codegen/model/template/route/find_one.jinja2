@api.get("{{ path }}", status_code=200, response_model={{ model_name }}FindOneResponseModel)
{{ 'async ' if is_async else '' }}def get_one_by_primary_key(
                            response: Response,
                            url_param=Depends({{ model_name }}PrimaryKeyModel),
                            query=Depends({{ model_name }}FindOneRequestBodyModel),
                            session=Depends(db_session)):
    join_table_list = query.__dict__.pop('relationship', [])
    model = {{ model_name }}
    table = model.__table__
    column_list = table.c
    filter_list: List[BinaryExpression] = find_query_builder(param=query.__dict__,
                                                             model={{ model_name }})

    extra_query_expression: List[BinaryExpression] = find_query_builder(param=url_param.__dict__,
                                                                        model={{ model_name }})
    relationship_mapper = build_relationship_mapper(router_data.get("foreign_key_table", None), join_table_list)
    foreign_column_list = relationship_query_builder(relationship_mapper)

    # create query with filter and foreign column
    query_stmt = select(*[table] + foreign_column_list).filter(and_(*filter_list + extra_query_expression))

    # add join expression
    query_stmt = join_expression_builder(query_stmt, relationship_mapper)

    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(query_stmt)

    one_row_data = sql_executed_result.fetchall()
    formatted_result = group_find_many_join(one_row_data, [str(i.name) for i in column_list])

    if not formatted_result or len(formatted_result) < 1:
        return Response('specific data not found', status_code=HTTPStatus.NOT_FOUND, headers={"x-total-count": str(0)})
    response_data, = formatted_result
    response.headers["x-total-count"] = str(1)
    return response_data

