@api.get("{{ path }}", status_code=200, response_model={{ model_name }}FindManyItemListResponseModel)
{{ 'async ' if is_async else '' }}def get_many(
            response: Response,
            query=Depends({{ model_name }}FindManyRequestBodyModel),
            session=Depends(db_session)):
    filter_args = query.__dict__
    limit = filter_args.pop('limit', None)
    offset = filter_args.pop('offset', None)
    order_by_columns = filter_args.pop('order_by_columns', None)
    join_table_list = query.__dict__.pop('relationship', [])
    model = {{ model_name }}
    table = model.__table__
    column_list = table.c
    filter_list: List[BinaryExpression] = find_query_builder(param=query.__dict__,
                                                             model=model)
    # init response format
    response_format = {
            "total": 0,
            "result": []
        }


    total_stmt = select(func.count(router_data["pk"])).where(and_(*filter_list))
    total_result = {{ 'await ' if is_async else '' }}session.execute(total_stmt).scalar()
    if total_result < 1:
        response_data = parse_obj_as({{ model_name }}FindManyItemListResponseModel, response_format)
        response.headers["x-total-count"] = str(0)
        return response_data

    foreign_key_table = router_data["foreign_key_table"]

    relationship_mapper = build_relationship_mapper(foreign_key_table, model.__tablename__)

    join_relationship_mapping = join_relationship_mapping_builder(relationship_mapper, model.__tablename__, join_table_list)

    foreign_column_list = relationship_query_builder(join_relationship_mapping)

    if join_table_list and (limit or offset):
        # use sub query and join

        subquery_stmt = select(*[table]).filter(and_(*filter_list))

        # add page
        subquery_stmt = subquery_stmt.limit(limit).offset(offset)

        # add orderby
        subquery_stmt = orderby_expression_builder(subquery_stmt, order_by_columns, model)
        subquery_stmt = subquery_stmt.subquery()

        # build base query
        base_query_stmt = select(*[subquery_stmt] + foreign_column_list)

        # add join expression
        query_stmt = join_expression_builder(base_query_stmt, join_relationship_mapping, {table: subquery_stmt})

        # add orderby
        query_stmt = orderby_expression_builder(query_stmt, order_by_columns, subquery_stmt.c)

    else:
        # use join only

        query_stmt = select(*[table] + foreign_column_list).filter(and_(*filter_list))

        # add page
        query_stmt = query_stmt.limit(limit).offset(offset)

        # add join expression
        query_stmt = join_expression_builder(query_stmt, join_relationship_mapping)

        # add orderby
        query_stmt = orderby_expression_builder(query_stmt, order_by_columns, model)

    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(query_stmt)
    result = sql_executed_result.fetchall()

    formatted_result = group_find_many_join(result, [str(i.name) for i in column_list])
    response_format["total"] = total_result
    response_format["result"] = formatted_result
    response_data = parse_obj_as({{ model_name }}FindManyItemListResponseModel, response_format)
    response.headers["x-total-count"] = str(len(formatted_result))
    return response_data

