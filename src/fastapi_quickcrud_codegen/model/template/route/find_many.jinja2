@api.get("{{ path }}", status_code=200, response_model={{ model_name }}FindManyItemListResponseModel)
{{ 'async ' if is_async else '' }}def get_many(
            response: Response,
            query=Depends({{ model_name }}FindManyRequestBodyModel),
            session=Depends(db_session)):
    filter_args = query.__dict__
    limit = filter_args.pop('limit', None)
    offset = filter_args.pop('offset', None)
    order_by_columns = filter_args.pop('order_by_columns', None)
    join_table_list = query.__dict__.pop('relationship', [])
    model = {{ model_name }}
    table = model.__table__
    column_list = table.c
    filter_list: List[BinaryExpression] = find_query_builder(param=query.__dict__,
                                                             model=model)
    stmt = select(*[table]).filter(and_(*filter_list))

    sql_executed_result_without_paginate = {{ 'await ' if is_async else '' }}session.execute(stmt)
    total = len(sql_executed_result_without_paginate.fetchall())

    response_format = {
            "total": 0,
            "result": []
        }
    if total < 1:
        response_data = parse_obj_as({{ model_name }}FindManyItemListResponseModel, response_format)
        response.headers["x-total-count"] = str(0)
        return response_data

    # add page
    stmt = stmt.limit(limit).offset(offset)

    # add join expression
    join_table_list = [str(i) for i in join_table_list]
    relationship_mapper = {}
    for table_name, mapper in router_data["foreign_key_table"].items():
        if table_name in join_table_list:
            relationship_mapper[table_name] = mapper
    stmt, sub_query = join_expression_builder(stmt, relationship_mapper, table)

    # add orderby
    if sub_query is not None:
        model = sub_query.c
    stmt = orderby_expression_builder(stmt, order_by_columns, model)

    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(stmt)

    result = sql_executed_result.fetchall()

    formatted_result = group_find_many_join(result, [str(i.name) for i in column_list])
    response_format["total"] = total
    response_format["result"] = formatted_result
    response_data = parse_obj_as({{ model_name }}FindManyItemListResponseModel, response_format)
    response.headers["x-total-count"] = str(total)
    return response_data
