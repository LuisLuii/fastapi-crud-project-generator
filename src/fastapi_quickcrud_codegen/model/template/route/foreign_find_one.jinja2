@api.get("{{ path }}", status_code=200, response_model={{ model_name }}FindOneForeignTreeResponseModel)
{{ 'async ' if is_async else '' }}def foreign_get_one(
            response: Response,
            request: Request,
            url_param=Depends({{ model_name }}FindOneRelationshipPrimaryKeyModel),
            query=Depends({{ model_name }}FindOneForeignTreeRequestBody),
            session=Depends(db_session)):

    request_path = request.url.path.replace(api.prefix, "")
    target_model = request_path.split("/")[-2]

    path_include_table_regex = re.compile(r'\/([^\/]+)+/')
    path_include_table = path_include_table_regex.findall(request_path)

    join_table_list = query.__dict__.pop('relationship', [])
    join_table_list = [str(i) for i in join_table_list]

    foreign_key_table = router_data["foreign_key_table"]
    model = router_data["instance_mapper"][target_model]
    table = model.__table__
    base_model_name = model.__tablename__
    pk = get_pk(model)
    column_list = table.c
    filter_list: List[BinaryExpression] = find_query_builder(param=query.__dict__,
                                                             model=model)
    path_filter_list: List[BinaryExpression] = foreign_path_query_builder(param=url_param.__dict__,
                                                                        model=router_data["instance_mapper"])


    # prepare a sql stmt that number of total result for response
    relationship_mapper = build_relationship_mapper(foreign_key_table, base_model_name)

    join_relationship_mapping = join_relationship_mapping_builder(relationship_mapper, target_model, join_table_list)

    total_stmt = select(func.count(pk)).where(and_(*filter_list + path_filter_list))

    # add join expression
    join_relationship_mapping_for_total_count_query_and_path_query = {}
    join_relationship_mapping_for_data_query = {}
    for joining_table_k, joining_table_v in {**join_relationship_mapping}.items():
        if joining_table_k in path_include_table:
            joining_table_v["join"] = True
            join_relationship_mapping_for_total_count_query_and_path_query[joining_table_k] = joining_table_v
        if joining_table_k in join_table_list:
            joining_table_v["join"] = True
            join_relationship_mapping_for_data_query[joining_table_k] = joining_table_v

    total_stmt = join_expression_builder(total_stmt, join_relationship_mapping_for_total_count_query_and_path_query)

    total_result = {{ 'await ' if is_async else '' }}session.execute(total_stmt)
    total_result = total_result.scalar()
    if total_result < 1:
        return Response('specific data not found', status_code=HTTPStatus.NOT_FOUND, headers={"x-total-count": str(0)})

    foreign_column_list = relationship_query_builder(join_relationship_mapping_for_data_query)

    # if join_table_list and (limit or offset):
    # use sub query and join
    subquery_stmt = select(*[table]).filter(and_(*filter_list + path_filter_list))

    # add join expression for path join
    subquery_stmt = join_expression_builder(subquery_stmt, join_relationship_mapping_for_total_count_query_and_path_query)
    subquery_stmt = subquery_stmt.subquery()

    # build base query
    base_query_stmt = select(*[subquery_stmt] + foreign_column_list)

    # add join expression
    query_stmt = join_expression_builder(base_query_stmt, join_relationship_mapping_for_data_query, {table: subquery_stmt})

    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(query_stmt)
    result = sql_executed_result.fetchall()

    formatted_result = group_find_many_join(result, [str(i.name) for i in column_list])
    response_data = parse_obj_as({{ model_name }}FindOneForeignTreeResponseModel, formatted_result[0])
    response.headers["x-total-count"] = str(len(formatted_result))
    return response_data
