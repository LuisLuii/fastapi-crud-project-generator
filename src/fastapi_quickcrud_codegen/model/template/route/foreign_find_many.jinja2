@api.get("{{ path }}", status_code=200, response_model={{ model_name }}FindManyForeignTreeItemListResponseModel)
{{ 'async ' if is_async else '' }}def foreign_get_many(
            response: Response,
            request: Request,
            url_param=Depends({{ model_name }}RelationshipPrimaryKeyModel),
            query=Depends({{ model_name }}FindManyForeignTreeRequestBody),
            session=Depends(db_session)):


    request_path = request.url.path
    target_model = request_path.split("/")[-1]

    path_include_table_regex = re.compile(r'\/([^\/]+)+/')
    path_include_table = path_include_table_regex.findall(request.url.path)

    filter_args = query.__dict__
    limit = filter_args.pop('limit', None)
    offset = filter_args.pop('offset', None)
    order_by_columns = filter_args.pop('order_by_columns', None)

    join_table_list = query.__dict__.pop('relationship', [])
    join_table_list = [str(i) for i in join_table_list]

    foreign_key_table = router_data["foreign_key_table"]
    model = router_data["instance_mapper"][target_model]
    table = model.__table__
    base_model_name = model.__tablename__
    pk = get_pk(model)
    column_list = table.c
    filter_list: List[BinaryExpression] = find_query_builder(param=query.__dict__,
                                                             model=model)
    path_filter_list: List[BinaryExpression] = foreign_path_query_builder(param=url_param.__dict__,
                                                                        model=router_data["instance_mapper"])

    # init response format
    response_format = {
            "total": 0,
            "result": []
        }


    # prepare a sql stmt that number of total result for response
    relationship_mapper = build_relationship_mapper(foreign_key_table, base_model_name)

    join_relationship_mapping = join_relationship_mapping_builder(relationship_mapper, target_model, join_table_list)

    total_stmt = select(func.count(pk)).where(and_(*filter_list + path_filter_list))

    # add join expression
    join_relationship_mapping_for_total_count_query = {**join_relationship_mapping}
    for joining_table in {**join_relationship_mapping}:
        if joining_table not in path_include_table:
            join_relationship_mapping_for_total_count_query.pop(joining_table, None)
    total_stmt = join_expression_builder(total_stmt, join_relationship_mapping_for_total_count_query)

    total_result = {{ 'await ' if is_async else '' }}session.execute(total_stmt).scalar()
    if total_result < 1:
        response_data = parse_obj_as({{ model_name }}FindManyForeignTreeItemListResponseModel, response_format)
        response.headers["x-total-count"] = str(0)
        return response_data

    foreign_column_list = relationship_query_builder(join_relationship_mapping)

    query_stmt = select(*[table] + foreign_column_list).filter(and_(*filter_list + path_filter_list))

    # add page
    query_stmt = query_stmt.limit(limit).offset(offset)

    # add join expression
    query_stmt = join_expression_builder(query_stmt, join_relationship_mapping)

    # add orderby
    query_stmt = orderby_expression_builder(query_stmt, order_by_columns, model)

    sql_executed_result = {{ 'await ' if is_async else '' }}session.execute(query_stmt)
    result = sql_executed_result.fetchall()

    formatted_result = group_find_many_join(result, [str(i.name) for i in column_list])
    response_format["total"] = total_result
    response_format["result"] = formatted_result
    response_data = parse_obj_as({{ model_name }}FindManyForeignTreeItemListResponseModel, response_format)
    response.headers["x-total-count"] = str(len(formatted_result))
    return response_data
